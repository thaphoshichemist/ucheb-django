[
{
  "model": "admin.logentry",
  "pk": 1,
  "fields": {
    "action_time": "2024-08-29T18:38:21.923Z",
    "user": 1,
    "content_type": 7,
    "object_id": "1",
    "object_repr": "Kto takoi Shultz?",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 2,
  "fields": {
    "action_time": "2024-08-29T18:49:14.380Z",
    "user": 1,
    "content_type": 7,
    "object_id": "1",
    "object_repr": "Kto takoi Shultz?",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 3,
  "fields": {
    "action_time": "2024-08-29T18:50:54.305Z",
    "user": 1,
    "content_type": 7,
    "object_id": "2",
    "object_repr": "Kto ya?",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 4,
  "fields": {
    "action_time": "2024-08-30T18:54:10.284Z",
    "user": 1,
    "content_type": 7,
    "object_id": "2",
    "object_repr": "Why ya?",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Title\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 5,
  "fields": {
    "action_time": "2024-08-30T21:58:29.874Z",
    "user": 1,
    "content_type": 7,
    "object_id": "2",
    "object_repr": "Why ya?",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 6,
  "fields": {
    "action_time": "2024-09-01T18:47:13.319Z",
    "user": 1,
    "content_type": 7,
    "object_id": "3",
    "object_repr": "New title",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 7,
  "fields": {
    "action_time": "2024-09-02T17:35:22.635Z",
    "user": 1,
    "content_type": 7,
    "object_id": "4",
    "object_repr": "First Page",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 8,
  "fields": {
    "action_time": "2024-09-02T17:35:46.672Z",
    "user": 1,
    "content_type": 7,
    "object_id": "5",
    "object_repr": "Second Page",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 9,
  "fields": {
    "action_time": "2024-09-02T17:36:10.387Z",
    "user": 1,
    "content_type": 7,
    "object_id": "5",
    "object_repr": "Second Page",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 10,
  "fields": {
    "action_time": "2024-09-02T17:36:15.480Z",
    "user": 1,
    "content_type": 7,
    "object_id": "4",
    "object_repr": "First Page",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 11,
  "fields": {
    "action_time": "2024-09-02T17:52:40.102Z",
    "user": 1,
    "content_type": 7,
    "object_id": "6",
    "object_repr": "Big Post",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 12,
  "fields": {
    "action_time": "2024-09-02T17:52:59.875Z",
    "user": 1,
    "content_type": 7,
    "object_id": "6",
    "object_repr": "Big Post",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 13,
  "fields": {
    "action_time": "2024-09-02T17:53:49.047Z",
    "user": 1,
    "content_type": 7,
    "object_id": "6",
    "object_repr": "Big Post",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 14,
  "fields": {
    "action_time": "2024-09-02T17:54:27.717Z",
    "user": 1,
    "content_type": 7,
    "object_id": "7",
    "object_repr": "rgaagre",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 15,
  "fields": {
    "action_time": "2024-09-02T17:54:45.628Z",
    "user": 1,
    "content_type": 7,
    "object_id": "8",
    "object_repr": "ddh fgrsg",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 16,
  "fields": {
    "action_time": "2024-09-03T15:29:05.829Z",
    "user": 1,
    "content_type": 7,
    "object_id": "9",
    "object_repr": "class method",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 17,
  "fields": {
    "action_time": "2024-09-03T19:45:34.035Z",
    "user": 1,
    "content_type": 8,
    "object_id": "1",
    "object_repr": "Comment by dasdada on Why ya?",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 18,
  "fields": {
    "action_time": "2024-09-05T18:44:17.506Z",
    "user": 1,
    "content_type": 9,
    "object_id": "2",
    "object_repr": "jazz",
    "action_flag": 2,
    "change_message": "[{\"added\": {\"name\": \"tagged item\", \"object\": \"First Page tagged with jazz\"}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 19,
  "fields": {
    "action_time": "2024-09-07T20:07:23.824Z",
    "user": 1,
    "content_type": 7,
    "object_id": "10",
    "object_repr": "Markdown post",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 20,
  "fields": {
    "action_time": "2024-09-07T20:07:44.076Z",
    "user": 1,
    "content_type": 7,
    "object_id": "10",
    "object_repr": "Markdown post",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Status\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 21,
  "fields": {
    "action_time": "2024-09-07T20:10:12.974Z",
    "user": 1,
    "content_type": 7,
    "object_id": "10",
    "object_repr": "Markdown post",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Body\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 22,
  "fields": {
    "action_time": "2024-09-07T20:36:50.844Z",
    "user": 1,
    "content_type": 11,
    "object_id": "1",
    "object_repr": "localhost:8000",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"Domain name\", \"Display name\"]}}]"
  }
},
{
  "model": "auth.permission",
  "pk": 1,
  "fields": {
    "name": "Can add log entry",
    "content_type": 1,
    "codename": "add_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 2,
  "fields": {
    "name": "Can change log entry",
    "content_type": 1,
    "codename": "change_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 3,
  "fields": {
    "name": "Can delete log entry",
    "content_type": 1,
    "codename": "delete_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 4,
  "fields": {
    "name": "Can view log entry",
    "content_type": 1,
    "codename": "view_logentry"
  }
},
{
  "model": "auth.permission",
  "pk": 5,
  "fields": {
    "name": "Can add permission",
    "content_type": 2,
    "codename": "add_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 6,
  "fields": {
    "name": "Can change permission",
    "content_type": 2,
    "codename": "change_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 7,
  "fields": {
    "name": "Can delete permission",
    "content_type": 2,
    "codename": "delete_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 8,
  "fields": {
    "name": "Can view permission",
    "content_type": 2,
    "codename": "view_permission"
  }
},
{
  "model": "auth.permission",
  "pk": 9,
  "fields": {
    "name": "Can add group",
    "content_type": 3,
    "codename": "add_group"
  }
},
{
  "model": "auth.permission",
  "pk": 10,
  "fields": {
    "name": "Can change group",
    "content_type": 3,
    "codename": "change_group"
  }
},
{
  "model": "auth.permission",
  "pk": 11,
  "fields": {
    "name": "Can delete group",
    "content_type": 3,
    "codename": "delete_group"
  }
},
{
  "model": "auth.permission",
  "pk": 12,
  "fields": {
    "name": "Can view group",
    "content_type": 3,
    "codename": "view_group"
  }
},
{
  "model": "auth.permission",
  "pk": 13,
  "fields": {
    "name": "Can add user",
    "content_type": 4,
    "codename": "add_user"
  }
},
{
  "model": "auth.permission",
  "pk": 14,
  "fields": {
    "name": "Can change user",
    "content_type": 4,
    "codename": "change_user"
  }
},
{
  "model": "auth.permission",
  "pk": 15,
  "fields": {
    "name": "Can delete user",
    "content_type": 4,
    "codename": "delete_user"
  }
},
{
  "model": "auth.permission",
  "pk": 16,
  "fields": {
    "name": "Can view user",
    "content_type": 4,
    "codename": "view_user"
  }
},
{
  "model": "auth.permission",
  "pk": 17,
  "fields": {
    "name": "Can add content type",
    "content_type": 5,
    "codename": "add_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 18,
  "fields": {
    "name": "Can change content type",
    "content_type": 5,
    "codename": "change_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 19,
  "fields": {
    "name": "Can delete content type",
    "content_type": 5,
    "codename": "delete_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 20,
  "fields": {
    "name": "Can view content type",
    "content_type": 5,
    "codename": "view_contenttype"
  }
},
{
  "model": "auth.permission",
  "pk": 21,
  "fields": {
    "name": "Can add session",
    "content_type": 6,
    "codename": "add_session"
  }
},
{
  "model": "auth.permission",
  "pk": 22,
  "fields": {
    "name": "Can change session",
    "content_type": 6,
    "codename": "change_session"
  }
},
{
  "model": "auth.permission",
  "pk": 23,
  "fields": {
    "name": "Can delete session",
    "content_type": 6,
    "codename": "delete_session"
  }
},
{
  "model": "auth.permission",
  "pk": 24,
  "fields": {
    "name": "Can view session",
    "content_type": 6,
    "codename": "view_session"
  }
},
{
  "model": "auth.permission",
  "pk": 25,
  "fields": {
    "name": "Can add post",
    "content_type": 7,
    "codename": "add_post"
  }
},
{
  "model": "auth.permission",
  "pk": 26,
  "fields": {
    "name": "Can change post",
    "content_type": 7,
    "codename": "change_post"
  }
},
{
  "model": "auth.permission",
  "pk": 27,
  "fields": {
    "name": "Can delete post",
    "content_type": 7,
    "codename": "delete_post"
  }
},
{
  "model": "auth.permission",
  "pk": 28,
  "fields": {
    "name": "Can view post",
    "content_type": 7,
    "codename": "view_post"
  }
},
{
  "model": "auth.permission",
  "pk": 29,
  "fields": {
    "name": "Can add comment",
    "content_type": 8,
    "codename": "add_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 30,
  "fields": {
    "name": "Can change comment",
    "content_type": 8,
    "codename": "change_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 31,
  "fields": {
    "name": "Can delete comment",
    "content_type": 8,
    "codename": "delete_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 32,
  "fields": {
    "name": "Can view comment",
    "content_type": 8,
    "codename": "view_comment"
  }
},
{
  "model": "auth.permission",
  "pk": 33,
  "fields": {
    "name": "Can add tag",
    "content_type": 9,
    "codename": "add_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 34,
  "fields": {
    "name": "Can change tag",
    "content_type": 9,
    "codename": "change_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 35,
  "fields": {
    "name": "Can delete tag",
    "content_type": 9,
    "codename": "delete_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 36,
  "fields": {
    "name": "Can view tag",
    "content_type": 9,
    "codename": "view_tag"
  }
},
{
  "model": "auth.permission",
  "pk": 37,
  "fields": {
    "name": "Can add tagged item",
    "content_type": 10,
    "codename": "add_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 38,
  "fields": {
    "name": "Can change tagged item",
    "content_type": 10,
    "codename": "change_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 39,
  "fields": {
    "name": "Can delete tagged item",
    "content_type": 10,
    "codename": "delete_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 40,
  "fields": {
    "name": "Can view tagged item",
    "content_type": 10,
    "codename": "view_taggeditem"
  }
},
{
  "model": "auth.permission",
  "pk": 41,
  "fields": {
    "name": "Can add site",
    "content_type": 11,
    "codename": "add_site"
  }
},
{
  "model": "auth.permission",
  "pk": 42,
  "fields": {
    "name": "Can change site",
    "content_type": 11,
    "codename": "change_site"
  }
},
{
  "model": "auth.permission",
  "pk": 43,
  "fields": {
    "name": "Can delete site",
    "content_type": 11,
    "codename": "delete_site"
  }
},
{
  "model": "auth.permission",
  "pk": 44,
  "fields": {
    "name": "Can view site",
    "content_type": 11,
    "codename": "view_site"
  }
},
{
  "model": "auth.user",
  "pk": 1,
  "fields": {
    "password": "pbkdf2_sha256$870000$YgbrWSA70MmMQdaUbw5VfK$Bq3NtaZQ5nDpD3aB0HnW611vMHKiCNLY5oCsY7FP6Wk=",
    "last_login": "2024-08-29T18:30:04.340Z",
    "is_superuser": true,
    "username": "priv",
    "first_name": "",
    "last_name": "",
    "email": "priv@blog.com",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2024-08-29T18:27:59.733Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 1,
  "fields": {
    "app_label": "admin",
    "model": "logentry"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 2,
  "fields": {
    "app_label": "auth",
    "model": "permission"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 3,
  "fields": {
    "app_label": "auth",
    "model": "group"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 4,
  "fields": {
    "app_label": "auth",
    "model": "user"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 5,
  "fields": {
    "app_label": "contenttypes",
    "model": "contenttype"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 6,
  "fields": {
    "app_label": "sessions",
    "model": "session"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 7,
  "fields": {
    "app_label": "blog",
    "model": "post"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 8,
  "fields": {
    "app_label": "blog",
    "model": "comment"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 9,
  "fields": {
    "app_label": "taggit",
    "model": "tag"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 10,
  "fields": {
    "app_label": "taggit",
    "model": "taggeditem"
  }
},
{
  "model": "contenttypes.contenttype",
  "pk": 11,
  "fields": {
    "app_label": "sites",
    "model": "site"
  }
},
{
  "model": "sessions.session",
  "pk": "ifc3ekdtue5ap09h2g7pe5n4mmqegwjy",
  "fields": {
    "session_data": ".eJxVjDsOwjAQBe_iGlny36ak5wzW2ruLA8iR4qRC3B0ipYD2zcx7iQzb2vI2aMkTirNQ4vS7FagP6jvAO_TbLOvc12UqclfkQYe8zkjPy-H-HTQY7Vu7iMqwc6mCJau9S8g1RoOGwWKJCdCowGyoUmKP0QYTXNEBrU6WvHh_APFoOC8:1sjjuG:slZtwNyqgp-79bk0M94peZ2Ur14hcipDXAlUNR8ap-I",
    "expire_date": "2024-09-12T18:30:04.345Z"
  }
},
{
  "model": "blog.post",
  "pk": 2,
  "fields": {
    "title": "Why ya?",
    "slug": "kto-ya",
    "author": 1,
    "body": "nenat",
    "publish": "2024-08-29T18:49:36Z",
    "created": "2024-08-29T18:50:54.300Z",
    "updated": "2024-08-30T21:58:29.865Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 3,
  "fields": {
    "title": "New title",
    "slug": "another-post",
    "author": 1,
    "body": "Post body",
    "publish": "2024-08-30T18:32:48Z",
    "created": "2024-08-30T18:32:56.111Z",
    "updated": "2024-09-01T18:47:13.311Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 4,
  "fields": {
    "title": "First Page",
    "slug": "first-page",
    "author": 1,
    "body": "Test page 1",
    "publish": "2024-09-02T17:34:57Z",
    "created": "2024-09-02T17:35:22.629Z",
    "updated": "2024-09-02T17:36:15.476Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 5,
  "fields": {
    "title": "Second Page",
    "slug": "second-page",
    "author": 1,
    "body": "Test page 2",
    "publish": "2024-09-02T17:35:28Z",
    "created": "2024-09-02T17:35:46.667Z",
    "updated": "2024-09-02T17:36:10.379Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 6,
  "fields": {
    "title": "Big Post",
    "slug": "big-post",
    "author": 1,
    "body": "Note that since the child template didn’t define the sidebar block, the value from the parent template is used instead. Content within a {% block %} tag in a parent template is always used as a fallback.\r\n\r\nYou can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:\r\n\r\nCreate a base.html template that holds the main look-and-feel of your site.\r\nCreate a base_SECTIONNAME.html template for each “section” of your site. For example, base_news.html, base_sports.html. These templates all extend base.html and include section-specific styles/design.\r\nCreate individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template.\r\nThis approach maximizes code reuse and helps to add items to shared content areas, such as section-wide navigation.\r\n\r\nHere are some tips for working with inheritance:\r\n\r\nIf you use {% extends %} in a template, it must be the first template tag in that template. Template inheritance won’t work, otherwise.\r\n\r\nMore {% block %} tags in your base templates are better. Remember, child templates don’t have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It’s better to have more hooks than fewer hooks.\r\n\r\nIf you find yourself duplicating content in a number of templates, it probably means you should move that content to a {% block %} in a parent template.\r\n\r\nIf you need to get the content of the block from the parent template, the {{ block.super }} variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using {{ block.super }} will not be automatically escaped (see the next section), since it was already escaped, if necessary, in the parent template.\r\n\r\nBy using the same template name as you are inheriting from, {% extends %} can be used to inherit a template at the same time as overriding it. Combined with {{ block.super }}, this can be a powerful way to make small customizations. See Extending an overridden template in the Overriding templates How-to for a full example.\r\n\r\nVariables created outside of a {% block %} using the template tag as syntax can’t be used inside the block. For example, this template doesn’t render anything:\r\n\r\n{% translate \"Title\" as title %}\r\n{% block content %}{{ title }}{% endblock %}\r\nFor extra readability, you can optionally give a name to your {% endblock %} tag. For example:\r\n\r\n{% block content %}\r\n...\r\n{% endblock content %}\r\nIn larger templates, this technique helps you see which {% block %} tags are being closed.\r\n\r\n{% block %} tags are evaluated first. That’s why the content of a block is always overridden, regardless of the truthiness of surrounding tags. For example, this template will always override the content of the title block:\r\n\r\n{% if change_title %}\r\n    {% block title %}Hello!{% endblock title %}\r\n{% endif %}\r\nFinally, note that you can’t define multiple block tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a hole to fill – it also defines the content that fills the hole in the parent. If there were two similarly-named block tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.\r\n\r\nAutomatic HTML escaping¶\r\nWhen generating HTML from templates, there’s always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment:\r\n\r\nHello, {{ name }}\r\nAt first, this seems like a harmless way to display a user’s name, but consider what would happen if the user entered their name as this:\r\n\r\n<script>alert('hello')</script>\r\nWith this name value, the template would be rendered as:\r\n\r\nHello, <script>alert('hello')</script>\r\n…which means the browser would pop-up a JavaScript alert box!\r\n\r\nSimilarly, what if the name contained a '<' symbol, like this?\r\n\r\n<b>username\r\nThat would result in a rendered template like this:\r\n\r\nHello, <b>username\r\n…which, in turn, would result in the remainder of the web page being in bold!\r\n\r\nClearly, user-submitted data shouldn’t be trusted blindly and inserted directly into your web pages, because a malicious user could use this kind of hole to do potentially bad things. This type of security exploit is called a Cross Site Scripting (XSS) attack.\r\n\r\nTo avoid this problem, you have two options:\r\n\r\nOne, you can make sure to run each untrusted variable through the escape filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on you, the developer / template author, to ensure you’re escaping everything. It’s easy to forget to escape data.\r\nTwo, you can take advantage of Django’s automatic HTML escaping. The remainder of this section describes how auto-escaping works.\r\nBy default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:\r\n\r\n< is converted to &lt;\r\n> is converted to &gt;\r\n' (single quote) is converted to &#x27;\r\n\" (double quote) is converted to &quot;\r\n& is converted to &amp;\r\nAgain, we stress that this behavior is on by default. If you’re using Django’s template system, you’re protected.\r\n\r\nHow to turn it off¶\r\nIf you don’t want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways.\r\n\r\nWhy would you want to turn it off? Because sometimes, template variables contain data that you intend to be rendered as raw HTML, in which case you don’t want their contents to be escaped. For example, you might store a blob of HTML in your database and want to embed that directly into your template. Or, you might be using Django’s template system to produce text that is not HTML – like an email message, for instance.\r\n\r\nFor individual variables¶\r\nTo disable auto-escaping for an individual variable, use the safe filter:\r\n\r\nThis will be escaped: {{ data }}\r\nThis will not be escaped: {{ data|safe }}\r\nThink of safe as shorthand for safe from further escaping or can be safely interpreted as HTML. In this example, if data contains '<b>', the output will be:\r\n\r\nThis will be escaped: &lt;b&gt;\r\nThis will not be escaped: <b>\r\nFor template blocks¶\r\nTo control auto-escaping for a template, wrap the template (or a particular section of the template) in the autoescape tag, like so:\r\n\r\n{% autoescape off %}\r\n    Hello {{ name }}\r\n{% endautoescape %}\r\nThe autoescape tag takes either on or off as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template:\r\n\r\nAuto-escaping is on by default. Hello {{ name }}\r\n\r\n{% autoescape off %}\r\n    This will not be auto-escaped: {{ data }}.\r\n\r\n    Nor this: {{ other_data }}\r\n    {% autoescape on %}\r\n        Auto-escaping applies again: {{ name }}\r\n    {% endautoescape %}\r\n{% endautoescape %}\r\nThe auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the include tag, just like all block tags. For example:\r\n\r\nbase.html¶\r\n{% autoescape off %}\r\n<h1>{% block title %}{% endblock %}</h1>\r\n{% block content %}\r\n{% endblock %}\r\n{% endautoescape %}\r\nchild.html¶\r\n{% extends \"base.html\" %}\r\n{% block title %}This &amp; that{% endblock %}\r\n{% block content %}{{ greeting }}{% endblock %}\r\nBecause auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the greeting variable contains the string <b>Hello!</b>:\r\n\r\n<h1>This &amp; that</h1>\r\n<b>Hello!</b>\r\nNotes¶\r\nGenerally, template authors don’t need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn’t be escaped, and mark data appropriately, so things Just Work in the template.\r\n\r\nIf you’re creating a template that might be used in situations where you’re not sure whether auto-escaping is enabled, then add an escape filter to any variable that needs escaping. When auto-escaping is on, there’s no danger of the escape filter double-escaping data – the escape filter does not affect auto-escaped variables.\r\n\r\nString literals and automatic escaping¶\r\nAs we mentioned earlier, filter arguments can be strings:\r\n\r\n{{ data|default:\"This is a string literal.\" }}\r\nAll string literals are inserted without any automatic escaping into the template – they act as if they were all passed through the safe filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written.\r\n\r\nThis means you would write :\r\n\r\n{{ data|default:\"3 &lt; 2\" }}\r\n…rather than:\r\n\r\n{{ data|default:\"3 < 2\" }}  {# Bad! Don't do this. #}\r\nThis doesn’t affect what happens to data coming from the variable itself. The variable’s contents are still automatically escaped, if necessary, because they’re beyond the control of the template author.\r\n\r\nAccessing method calls¶\r\nMost method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the “entry_set” syntax for finding a collection of objects related on a foreign key. Therefore, given a model called “comment” with a foreign key relationship to a model called “task” you can loop through all comments attached to a given task like this:\r\n\r\n{% for comment in task.comment_set.all %}\r\n    {{ comment }}\r\n{% endfor %}\r\nSimilarly, QuerySets provide a count() method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with:\r\n\r\n{{ task.comment_set.all.count }}\r\nYou can also access methods you’ve explicitly defined on your own models:\r\n\r\nmodels.py¶\r\nclass Task(models.Model):\r\n    def foo(self):\r\n        return \"bar\"\r\ntemplate.html¶\r\n{{ task.foo }}\r\nBecause Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display.\r\n\r\nCustom tag and filter libraries¶\r\nCertain applications provide custom tag and filter libraries. To access them in a template, ensure the application is in INSTALLED_APPS (we’d add 'django.contrib.humanize' for this example), and then use the load tag in a template:\r\n\r\n{% load humanize %}\r\n\r\n{{ 45000|intcomma }}\r\nIn the above, the load tag loads the humanize tag library, which then makes the intcomma filter available for use. If you’ve enabled django.contrib.admindocs, you can consult the documentation area in your admin to find the list of custom libraries in your installation.\r\n\r\nThe load tag can take multiple library names, separated by spaces. Example:\r\n\r\n{% load humanize i18n %}\r\nSee How to create custom template tags and filters for information on writing your own custom template libraries.\r\n\r\nCustom libraries and template inheritance¶\r\nWhen you load a custom tag or filter library, the tags/filters are only made available to the current template – not any parent or child templates along the template-inheritance path.\r\n\r\nFor example, if a template foo.html has {% load humanize %}, a child template (e.g., one that has {% extends \"foo.html\" %}) will not have access to the humanize template tags and filters. The child template is responsible for its own {% load humanize %}.\r\n\r\nThis is a feature for the sake of maintainability and sanity.\r\n\r\nSee also\r\n\r\nThe Templates Reference\r\nCovers built-in tags, built-in filters, using an alternative template language, and more.\r\n TemplatesBuilt-in template tags and filters Additional Information\r\nSupport Django!\r\nSupport Django!\r\nFedor Borshev donated to the Django Software Foundation to support Django development. Donate today!\r\nContents\r\nThe Django template language\r\nTemplates\r\nVariables\r\nFilters\r\nTags\r\nComments\r\nTemplate inheritance\r\nAutomatic HTML escaping\r\nHow to turn it off\r\nFor individual variables\r\nFor template blocks\r\nNotes\r\nString literals and automatic escaping\r\nAccessing method calls\r\nCustom tag and filter libraries\r\nCustom libraries and template inheritance\r\nBrowse\r\nPrev: Templates\r\nNext: Built-in template tags and filters\r\nTable of contents\r\nGeneral Index\r\nPython Module Index\r\nYou are here:\r\nDjango 5.1 documentation\r\nAPI Reference\r\nTemplates\r\nThe Django template language\r\nGetting help\r\nFAQ\r\nTry the FAQ — it's got answers to many common questions.\r\nIndex, Module Index, or Table of Contents\r\nHandy when looking for specific information.\r\ndjango-users mailing list\r\nSearch for information in the archives of the django-users mailing list, or post a question.\r\n#django IRC channel\r\nAsk a question in the #django IRC channel, or search the IRC logs to see if it’s been asked before.\r\nDjango Discord Server\r\nJoin the Django Discord Community.\r\nOfficial Django Forum\r\nJoin the community on the Django Forum.\r\nTicket tracker\r\nReport bugs with Django or Django documentation in our ticket tracker.\r\nDownload:\r\nOffline (Django 5.1): HTML | PDF | ePub\r\nProvided by Read the Docs.\r\n\r\nDjango Links",
    "publish": "2024-09-02T17:52:14Z",
    "created": "2024-09-02T17:52:40.095Z",
    "updated": "2024-09-02T17:53:49.040Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 7,
  "fields": {
    "title": "rgaagre",
    "slug": "rgaagre",
    "author": 1,
    "body": "gergegegjfjfjt",
    "publish": "2024-09-02T17:54:18Z",
    "created": "2024-09-02T17:54:27.712Z",
    "updated": "2024-09-02T17:54:27.712Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 8,
  "fields": {
    "title": "ddh fgrsg",
    "slug": "ddh-fgrsg",
    "author": 1,
    "body": "afreagagrsthbrthbsfhbnydfbfgcvfgrthrgvdbr",
    "publish": "2024-09-02T17:54:32Z",
    "created": "2024-09-02T17:54:45.624Z",
    "updated": "2024-09-02T17:54:45.624Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 9,
  "fields": {
    "title": "class method",
    "slug": "class-method",
    "author": 1,
    "body": "{% include \"pagination.html\" with page=page_obj %}",
    "publish": "2024-09-03T15:28:40Z",
    "created": "2024-09-03T15:29:05.817Z",
    "updated": "2024-09-03T15:29:05.817Z",
    "status": "PB"
  }
},
{
  "model": "blog.post",
  "pk": 10,
  "fields": {
    "title": "Markdown post",
    "slug": "markdown-post",
    "author": 1,
    "body": "This is a post formatted with markdown\r\n--------------------------------------\r\n\r\n*This is emphasized* and **this is more emphasized**.\r\n\r\nHere is a list:\r\n\r\n* One\r\n* Two\r\n* Three\r\n\r\nAnd a [link to the Django website](https://www.djangoproject.com/).",
    "publish": "2024-09-07T20:06:09Z",
    "created": "2024-09-07T20:07:23.806Z",
    "updated": "2024-09-07T20:10:12.954Z",
    "status": "PB"
  }
},
{
  "model": "blog.comment",
  "pk": 1,
  "fields": {
    "post": 2,
    "name": "dasdada",
    "email": "your_account@gmail.com",
    "body": "asdadasdad",
    "created": "2024-09-03T19:45:34.029Z",
    "updated": "2024-09-03T19:45:34.029Z",
    "active": true
  }
},
{
  "model": "blog.comment",
  "pk": 2,
  "fields": {
    "post": 9,
    "name": "dasdada",
    "email": "your_account@gmail.com",
    "body": ";p;ilui",
    "created": "2024-09-03T19:58:24.391Z",
    "updated": "2024-09-03T19:58:24.391Z",
    "active": true
  }
},
{
  "model": "blog.comment",
  "pk": 3,
  "fields": {
    "post": 9,
    "name": "dasdada",
    "email": "your_account@gmail.com",
    "body": "dweqeqrfqwrq",
    "created": "2024-09-07T19:27:20.723Z",
    "updated": "2024-09-07T19:27:20.723Z",
    "active": true
  }
},
{
  "model": "taggit.tag",
  "pk": 1,
  "fields": {
    "name": "music",
    "slug": "music"
  }
},
{
  "model": "taggit.tag",
  "pk": 2,
  "fields": {
    "name": "jazz",
    "slug": "jazz"
  }
},
{
  "model": "taggit.tag",
  "pk": 3,
  "fields": {
    "name": "django",
    "slug": "django"
  }
},
{
  "model": "taggit.tag",
  "pk": 4,
  "fields": {
    "name": "markdown",
    "slug": "markdown"
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 1,
  "fields": {
    "tag": 1,
    "content_type": 7,
    "object_id": 3
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 2,
  "fields": {
    "tag": 2,
    "content_type": 7,
    "object_id": 3
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 4,
  "fields": {
    "tag": 2,
    "content_type": 7,
    "object_id": 4
  }
},
{
  "model": "taggit.taggeditem",
  "pk": 5,
  "fields": {
    "tag": 4,
    "content_type": 7,
    "object_id": 10
  }
},
{
  "model": "sites.site",
  "pk": 1,
  "fields": {
    "domain": "localhost:8000",
    "name": "localhost:8000"
  }
}
]
